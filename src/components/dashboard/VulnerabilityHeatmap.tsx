import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Badge } from '../ui/badge';

interface VulnerabilityData {
  port: number;
  service: string;
  attacks: number;
  severity: 'critical' | 'high' | 'medium' | 'low';
  percentage: number;
}

const VulnerabilityHeatmap: React.FC = () => {
  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityData[]>([]);

  useEffect(() => {
    const generateData = () => {
      const baseData = [
        { port: 22, service: 'SSH', attacks: 2847, severity: 'critical' as const },
        { port: 80, service: 'HTTP', attacks: 1923, severity: 'high' as const },
        { port: 443, service: 'HTTPS', attacks: 1654, severity: 'high' as const },
        { port: 3389, service: 'RDP', attacks: 1432, severity: 'critical' as const },
        { port: 21, service: 'FTP', attacks: 987, severity: 'medium' as const },
        { port: 23, service: 'Telnet', attacks: 756, severity: 'high' as const },
        { port: 3306, service: 'MySQL', attacks: 634, severity: 'medium' as const },
        { port: 25, service: 'SMTP', attacks: 521, severity: 'low' as const }
      ];

      const data = baseData.map(item => {
        const variation = Math.floor((Math.random() - 0.5) * 200);
        const newAttacks = Math.max(50, item.attacks + variation);
        return {
          ...item,
          attacks: newAttacks
        };
      });

      // Calculate percentages
      const maxAttacks = Math.max(...data.map(d => d.attacks));
      const dataWithPercentages = data.map(item => ({
        ...item,
        percentage: (item.attacks / maxAttacks) * 100
      }));

      setVulnerabilities(dataWithPercentages.sort((a, b) => b.attacks - a.attacks));
    };

    generateData();
    const interval = setInterval(generateData, 4000);
    return () => clearInterval(interval);
  }, []);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return { bg: 'bg-red-600', text: 'text-red-100', border: 'border-red-500' };
      case 'high': return { bg: 'bg-orange-500', text: 'text-orange-100', border: 'border-orange-400' };
      case 'medium': return { bg: 'bg-yellow-500', text: 'text-yellow-100', border: 'border-yellow-400' };
      case 'low': return { bg: 'bg-green-500', text: 'text-green-100', border: 'border-green-400' };
      default: return { bg: 'bg-gray-500', text: 'text-gray-100', border: 'border-gray-400' };
    }
  };

  const getBarColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'from-red-600 to-red-400';
      case 'high': return 'from-orange-500 to-orange-300';
      case 'medium': return 'from-yellow-500 to-yellow-300';
      case 'low': return 'from-green-500 to-green-300';
      default: return 'from-gray-500 to-gray-300';
    }
  };

  return (
    <Card className="bg-card/50 backdrop-blur-sm border-border/50 hover:border-cyber-blue/50 transition-all duration-300">
      <CardHeader className="pb-2">
        <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
          <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
          Vulnerability Heatmap
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-3">
        {/* Heatmap Bars */}
        <div className="space-y-2">
          {vulnerabilities.slice(0, 6).map((vuln, index) => {
            const colors = getSeverityColor(vuln.severity);
            const barGradient = getBarColor(vuln.severity);
            
            return (
              <div key={`${vuln.port}-${vuln.service}`} className="space-y-1">
                {/* Service Info */}
                <div className="flex items-center justify-between text-xs">
                  <div className="flex items-center gap-2">
                    <span className="font-mono text-cyber-blue font-medium">
                      :{vuln.port}
                    </span>
                    <span className="text-white font-medium">
                      {vuln.service}
                    </span>
                    <Badge className={`text-xs px-1.5 py-0.5 ${colors.bg} ${colors.text} ${colors.border}`}>
                      {vuln.severity}
                    </Badge>
                  </div>
                  <span className="font-bold text-white">
                    {vuln.attacks.toLocaleString()}
                  </span>
                </div>
                
                {/* Progress Bar */}
                <div className="relative">
                  <div className="w-full bg-slate-800/50 rounded-full h-2 overflow-hidden">
                    <div 
                      className={`h-full bg-gradient-to-r ${barGradient} transition-all duration-1000 ease-out relative`}
                      style={{ width: `${vuln.percentage}%` }}
                    >
                      {/* Animated shine effect */}
                      <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse"></div>
                    </div>
                  </div>
                  
                  {/* Percentage label */}
                  <div className="absolute right-0 top-0 -mt-5 text-xs text-muted-foreground">
                    {Math.round(vuln.percentage)}%
                  </div>
                </div>
              </div>
            );
          })}
        </div>
        
        {/* Legend */}
        <div className="grid grid-cols-2 gap-2 text-xs pt-2 border-t border-border/20">
          <div className="flex items-center gap-1">
            <div className="w-2 h-2 bg-red-600 rounded-full"></div>
            <span className="text-muted-foreground">Critical</span>
          </div>
          <div className="flex items-center gap-1">
            <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
            <span className="text-muted-foreground">High</span>
          </div>
          <div className="flex items-center gap-1">
            <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
            <span className="text-muted-foreground">Medium</span>
          </div>
          <div className="flex items-center gap-1">
            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
            <span className="text-muted-foreground">Low</span>
          </div>
        </div>
        
        {/* Summary */}
        <div className="text-xs text-muted-foreground text-center pt-1">
          Most targeted: Port {vulnerabilities[0]?.port} ({vulnerabilities[0]?.service})
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityHeatmap;